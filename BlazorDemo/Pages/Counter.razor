@page "/counter"
@inherits MerryYellow.BlazorDemo.Pages.CounterModel
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
<!--
<h1>Counter</h1>

<p>Current count: @currentCount</p>
<p>Current JS: @jsString</p>
    -->
<p>Status: @StatusText</p>
<!--
<button class="btn btn-primary" @onclick="@IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="@Run">Click me 222</button>
    -->

<select @bind="@SelectedPattern">
    @foreach (var p in this.GetPatternList())
    {
        <option value="@p">@p</option>
    }
</select>

<select @bind="@SelectedClass">
    @foreach (var c in this.GetClassList())
    {
        <option value="@c">@c</option>
    }
</select>

<button class="btn btn-primary" @onclick="@ApplyPatternAsync">Apply Pattern</button>


<div id="monaco_container" style="width:100%;height:600px;border:1px solid grey"></div>


@code {
int currentCount = 0;
string jsString = "JS";

string SelectedClass222 { get; set; } = "init";

void IncrementCount()
{
    currentCount++;
}

public async Task<string> GetSourceAsync()
{
    try
    {
        return await JsRuntime.InvokeAsync<string>("GetMonacoEditorContent");
    }
    catch (Exception e)
    {
        //text = e.ToString();//**-
        return string.Empty;
    }
}

[JSInvokable]
public async Task<string> OnContentChanged()
{
    IncrementCount();

    //var message = "Hello from a C# instance";
    //return Task.FromResult(message);
    jsString += "OCC";
    jsString += SelectedClass222;
    StatusText += "<" + SelectedClass222 + ">";

    var source = await GetSourceAsync();
    //jsString += source;

    this.Source = source;

    //**--StateHasChanged();

    this.OnSourceChangedAsync();

    //return Task.FromResult("occ");
    return "occ";
}

bool isInitialized;
protected override async Task OnAfterRenderAsync()
{
    base.OnAfterRenderAsync();

    if (isInitialized)
        return;

    var text = await Http.GetStringAsync("sample-data/SampleCode.txt");
    //string text = "yo";
    try
    {
        text = await JsRuntime.InvokeAsync<string>("CreateMonacoEditor", DotNetObjectRef.Create(this), text);
    }
    catch (Exception e)
    {
        text = e.ToString();
    }

    jsString = text;
    //ConvertedText = new MarkupString(text);

    //this.GetPatternList();

    this.getSource = () => GetSourceAsync().Result;
    isInitialized = true;

    await OnContentChanged();

    //StateHasChanged();
}
}
