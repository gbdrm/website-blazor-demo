@page "/counter"
@inherits MerryYellow.BlazorDemo.Pages.CounterModel
<!--
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
    -->
<!--
<h1>Counter</h1>

<p>Current count: @currentCount</p>
<p>Current JS: @jsString</p>
    -->
<p>Debug: @DebugText</p>
<p>Status: @StatusText</p>
<!--
<button class="btn btn-primary" @onclick="@IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="@Run">Click me 222</button>
    -->
<select @bind="@SelectedPattern">
    @foreach (var p in this.GetPatternList())
    {
        <option value="@p">@p</option>
    }
</select>

<select @bind="@SelectedClass">
    @foreach (var c in _classList)
    {
        <option value="@c">@c</option>
    }
</select>

<button class="btn btn-primary" @onclick="@ApplyPatternAsync">Apply Pattern</button>


<div id="monaco_container" style="width:100%;height:600px;border:1px solid grey"></div>


@code {


protected override async Task OnAfterRenderAsync()
{
    await base.OnAfterRenderAsync();

    if (IsInitialized)
        return;

    var text = await Http.GetStringAsync("sample-data/SampleCode.txt");
    //string text = "yo";
    try
    {
        text = await JsRuntime.InvokeAsync<string>("CreateMonacoEditor", DotNetObjectRef.Create(this), text);
    }
    catch (Exception e)
    {
        StatusText = e.ToString();
        text = null;
    }


    this.Source = await JS_GetSourceAsync();
    StatusText += "...";
    StateHasChanged();

    GetClassList();
    IsInitialized = true;

    StatusText = "Ready!";
    await ApplyPatternAsync();

    //StateHasChanged();



    //await OnContentChanged(); tc

    //StateHasChanged();
}

[JSInvokable]
public async Task<string> JS_OnContentChanged()
{
    this.Source = await JS_GetSourceAsync();

    this.OnSourceChangedAsync(); // do NOT await

    return "occ";
}
}
