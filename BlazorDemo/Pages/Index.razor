@page "/"
@inherits MerryYellow.BlazorDemo.Pages.CounterModel
<!--
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
    -->
<!--
<h1>Counter</h1>

<p>Current count: @currentCount</p>
<p>Current JS: @jsString</p>
    -->

    <div class="header">
        <img src="header_small.png" class="header-image" />
        <a href="https://marketplace.visualstudio.com/items?itemName=MerryYellow.patternmaker" target="_blank" style="position:absolute;right:1.5rem!important;">
            <img border="0" alt="Get for VS" src="get.png" width="163" height="96"
                 onmouseover="this.src='get2.png';" onmouseout="this.src='get.png';">
        </a>
    </div>

<ul id="top_ul">
    <li style="display:none">Debug: @DebugText<span class="close">x</span></li>
    <li>This demo has some restrictions since it runs on web assembly. Please <a href="https://marketplace.visualstudio.com/items?itemName=MerryYellow.patternmaker" target="_blank">download the extension</a> for the best experience.<span class="close">x</span></li>
    <!--
    <button class="btn btn-primary" @onclick="@IncrementCount">Click me</button>
    <button class="btn btn-primary" @onclick="@Run">Click me 222</button>
        -->

<li>
    <label for="select_pattern">Pattern </label>
    <select id="select_pattern" @bind="@SelectedPattern">
        @foreach (var p in this.GetPatternList())
        {
            <option value="@p">@p</option>
        }
    </select>

    <label for="select_class">Class </label>
    <select id="select_class" @bind="@SelectedClass">
        @foreach (var c in GetClassList())
        {
            <option value="@c">@c</option>
        }
    </select>

    <div class="select_theme_div">
        <label for="select_theme">Theme </label>
        <select id="select_theme" style="margin-right:0px" @onchange="@OnThemeChangedAsync">
            <option value="Light">Light</option>
            <option value="Dark">Dark</option>
        </select>
    </div>

    <span>@StatusText</span>

</li>

</ul>

<!--
<button class="btn btn-primary" @onclick="@ApplyPatternAsync">Apply Pattern</button>
    -->

<div id="progress_bar" class="progressbar">
    <div id="progress_bar_inner" class="inner"></div>
</div>

<div id="monaco_container" style="width:100%;min-height:400px;flex:1;border:1px solid grey"></div>

<span class="footer">
    <span id="footer_inner">
        <a class="link" href="https://marketplace.visualstudio.com/items?itemName=MerryYellow.patternmaker" target="_blank">VS Marketplace</a> | <a class="link" href="https://github.com/sapsari/website-blazor-demo" target="_blank">Website Source</a> | <a class="link" href="https://www.patreon.com/csharpshark" target="_blank">Patronage</a> | <a class="link" href="mailto:merryyellow@outlook.com" target="_blank">Bugs & Feedback</a>
    </span>
</span>

    @code {


        bool isInitializing;
        static int initCounter = 1;
        protected override async Task OnAfterRenderAsync()
        {
            await base.OnAfterRenderAsync();

            if (IsInitialized || isInitializing)
                return;

            isInitializing = true;

        RoslynWeb.Compiler.OnLogged -= Compiler_OnLogged;
        RoslynWeb.Compiler.OnLogged += Compiler_OnLogged;

            DebugText = "initCount: " + initCounter++;

            var text = await Http.GetStringAsync("sample-data/SampleCode.txt");
            //string text = "yo";
            try
            {
                text = await JsRuntime.InvokeAsync<string>("CreateMonacoEditor", DotNetObjectRef.Create(this), text);
            }
            catch (Exception e)
            {
                Log(e);
                text = null;
            }


            this.Source = await JS_GetSourceAsync();
            StatusText += "...";
            StateHasChanged();

            //GetClassList();
            IsInitialized = true;

            //StatusText = "Ready!";
            await ApplyPatternAsync();

            StatusText = "";
            StateHasChanged();

            //StateHasChanged();



            //await OnContentChanged(); tc

            //StateHasChanged();
        }

        [JSInvokable]
        public async Task<string> JS_OnContentChanged()
        {
            this.Source = await JS_GetSourceAsync();

            this.OnSourceChangedAsync(); // do NOT await

            return "occ";
        }
    }
